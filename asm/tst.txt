//hello


def main(){
init{
  r2 = h'0;

  r4 = h'FFFFFFf0;//FFFFFFEE;

  r10 = h'b9;
  r11 = h'9b;

  r15 =h'10;
}


//  [r4] = z + r10--; // uart out "b7"

  r8 = fork [ip++] (r2);
  man;

msg:
  [r4] = z + r10; // uart out "b9"

stop_self:
  r3 = stop r2 (r2);

  [r4] = z + r11; // uart out "9b"

//  r0 = z +[ip++];
//  3000;
lpoo:
//  r0-- = r0+z;
  ip = z + [ip++];// ? r0;
  stop_self;

//  lpoo;

  ip = z + [ip];
  msg;



def man(){
init{
  r4 = h'FFFFFFf0;//FFFFFFD6;//FFFFFFEE;
  r3 = h'FFFFFFf0;//FFFFFFD6;//FFFFFFEE;

  r1 = 4;

  r5 = h'12C00; // 640*480/4
  r7 = h'80001;

  r10 = h'80001;
  r11 = h'a5801;
  r2 = h'fa; //1024;

  r15 = h'10; //16;

  r9 = h'80001;
  r12 = h'a5801;
  r13 = h'cafff;//caf00; //h'CB000;
}

//var{
//	tst;
//}


loop:
	r8 = z + r7;
	r9 = r8 + r5;
	r10 = r9 + r5;
	r11 = r10 + r5;

vga_fill:
	[r11++] = z + r2;
	[r10++] = z + r2;
	[r9++] = z + r2;
	[r8++] = z + r2;
   
	r14 = r13 - r11;

/**
	r0 = z+r14;
vga_fill_addr_out:
	[r4] = z + r0;
        r0 = r0 >> [ip++]; // uart out (echo)
        8;
        ip = z + [ip++] ? r0;
        vga_fill_addr_out;
/**/

       ip = z + [ip++] ? r14;
       vga_fill;

addr_out:
        [r4] = z + r11;
        r11 = r11 >> [ip++]; // uart out (echo)
        8;
        ip = z + [ip++] ? r11;
        addr_out;

//	r11 = z + r12;
//	r10 = z + r9;

	r2 = z + [r4];
	[r4] = z + r2;

	r2 = r2 << [ip++];
	8;
	r2 = r2 + [r4];
	[r4] = z + r2;

	r2 = r2 << [ip++];
	8;
	r2 = r2 + [r4];
	[r4] = z + r2;


        ip = z + [ip]; // goto "loop" label
        loop;


        ip = z + [ip++]; // goto "begin" label
        loop;




/**
	r7 = r2 >> r1; // calculate of chanel (1, 2 or 3) 
	[r4] = z + r7; // uart out of chanel

	r5 = r4 - r7; // calculate addr of chanel
//	[r4] = r7 + z;

	[r5] = r2 & [ip++]; // out of masked data
	15;

	[r4] = z + [r5];
/**/


/**
        r1 = [ip++] + z;
        5;
        [r3] = r1 + z;
        z = z + r1++;
        ip = z + [ip];
        loop;

//	1024;
//	[r3] = r3 + r3;
//	r3 = [r3] + z;
	[r3] = [r3] + [r3];


//	r11 = [ip++] + z;
//	trd1;
	
	r10 = r11 + [ip++];
	17;
	
	[r10] = [ip++] + z;
	16;
	
	r1 = fork[ip++](r11);
	intr;
	
	r1 = z + [ip++];
	intr;
	r1 = r1 + [ip++];
	17;
	
	r1 = z - [r1];
	
	r8 = [ip++] + Z ;
	2;
l1:
	z = z + r8-- ;
	ip = [ip++] + z ? r8 ;
	l1 ;
	
	r1 = [r7] + [r8];
	
	r2 = r1 + r1;
	r3 = r1 - r1;
	
	[r7++]  =  ip++    + [ip++] ;
	l1;
l2:
	tst;
	
	def internal(){
		r3 <- r2++ <- [r1++] ;
	}

	r3 <- r2 <- r1;
	
	def intr(){
		r0 = stop z (z);
	l1:
		r1 = z + [ip];
		ip = [ip++] + z;
		l1;
	}
/**/
}


}


entry: main.
